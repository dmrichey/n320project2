{"version":3,"sources":["Components/Tree.js","Components/Family.js","Components/Person.js","Components/Ancestors.js","Components/Descendants.js","App.js","reportWebVitals.js","index.js"],"names":["Tree","props","useState","namePreview","setNamePreview","bioPreview","setBioPreview","familyNodeEls","data","families","map","node","ind","className","r","cx","nodeXCoord","cy","nodeYCoord","onClick","selectFamily","nodeindex","personNodeEls","persons","selectPerson","onMouseOver","name","bio","SetPreview","lineEls","lines","line","x1","x1Coord","y1","y1Coord","x2","x2Coord","y2","y2Coord","stroke","strokeWidth","height","width","Family","currentFamily","index","familyList","numChildren","children","length","childButtonEls","child","fill","spouse1","spouse2","resetStyles","Person","currentPerson","personList","race","bornText","born","deathText","died","parents","marriage","displayAncestors","displayDescendants","Ancestors","linesToStyle","nodesToVisit","push","currentNode","shift","isFamily","parentNum1","parentNum2","spouse1Line","spouse2Line","parentNum","parentLine","onMouseEnter","console","log","highlightedLineEls","Descendants","forEach","element","childrenLines","marriageNum","marriageLine","App","treeData","setTreeData","familyIndex","setFamilyIndex","personIndex","setPersonIndex","currentDisplay","setCurrentDisplay","loading","setLoading","useEffect","fetch","then","response","json","returnToTree","nodeId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAEe,SAASA,EAAKC,GAG3B,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAGIC,EAAgBN,EAAMO,KAAKC,SAASC,KAAI,SAACC,EAAMC,GACjD,OACE,wBACEC,UAAU,aACVC,EAAG,GACHC,GAAIJ,EAAKK,WACTC,GAAIN,EAAKO,WACTC,QAAS,WACPlB,EAAMmB,aAAaR,IAErBS,UAAWT,OAKbU,EAAgBrB,EAAMO,KAAKe,QAAQb,KAAI,SAACC,EAAMC,GAChD,OACE,wBACEC,UAAU,aACVC,EAAG,GACHC,GAAIJ,EAAKK,WACTC,GAAIN,EAAKO,WACTC,QAAS,WACPlB,EAAMuB,aAAaZ,IAErBa,YAAa,YAuCnB,SAAoBb,GAElBR,EAAeH,EAAMO,KAAKe,QAAQX,GAAKc,MACvCpB,EAAcL,EAAMO,KAAKe,QAAQX,GAAKe,KAzChCC,CAAWhB,IAEbS,UAAWT,OAMbiB,EAAU5B,EAAMO,KAAKsB,MAAMpB,KAAI,SAACqB,EAAMnB,GACxC,OACE,sBACEoB,GAAID,EAAKE,QACTC,GAAIH,EAAKI,QACTC,GAAIL,EAAKM,QACTC,GAAIP,EAAKQ,QACTC,OAAO,QACPC,YAAa,OAKnB,OACE,sBAAK5B,UAAU,UAAf,UACE,qBAAKA,UAAU,WAAf,SACE,sBAAK6B,OAAO,OAAOC,MAAM,OAAzB,UACGd,EACAtB,EACAe,OAGL,sBAAKT,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BV,IAC9B,qBAAKU,UAAU,aAAf,SAA6BR,UCnEtB,SAASuC,EAAO3C,GAC7B,IAAI4C,EAAgB5C,EAAM6C,MACtBC,EAAa9C,EAAMO,KAAKC,SAOxBuC,EAAcD,EAAWF,GAAeI,SAASC,OAAS,EAC1DC,EAAiBJ,EAAWF,GAAeI,SAASvC,KAAI,SAAC0C,EAAOxC,GAClE,OACE,wBACEG,GAAK,KAAOiC,GAAgBpC,EAAM,GAClCK,GAAG,MACHH,EAAE,KACFuC,KAAK,SACLlC,QAAS,kBAAMlB,EAAMuB,aAAa4B,SAMxC,OACE,sBAAKvC,UAAU,UAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,SACf,sBAAKA,UAAU,cAAc6B,OAAO,OAAOC,MAAM,SAAjD,UACE,wBACE5B,GAAG,MACHE,GAAG,KACHH,EAAE,KACFuC,KAAK,SACLlC,QAAS,WACPlB,EAAMuB,aAAauB,EAAWF,GAAeS,YAGjD,wBACEvC,GAAG,MACHE,GAAG,KACHH,EAAE,KACFuC,KAAK,SACLlC,QAAS,WACPlB,EAAMuB,aAAauB,EAAWF,GAAeU,YAGhDJ,QAGL,qBAAKtC,UAAU,YAAf,SACE,wBAAQM,QAASlB,EAAMuD,YAAvB,iCClDO,SAASC,EAAOxD,GAC7B,IAAIyD,EAAgBzD,EAAM6C,MACtBa,EAAa1D,EAAMO,KAAKe,QAO5B,OACE,sBAAKV,UAAU,UAAf,UACE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,OAAf,UACE,6BAAK8C,EAAWD,GAAehC,OAC/B,6BAAK,SAAWiC,EAAWD,GAAeE,OAC1C,6BACGD,EAAWD,GAAeG,SACzB,KACAF,EAAWD,GAAeI,OAE9B,6BACGH,EAAWD,GAAeK,UACzB,KACAJ,EAAWD,GAAeM,OAE9B,6BAAKL,EAAWD,GAAe/B,SAEjC,sBAAKd,UAAU,cAAc6B,OAAO,OAAOC,MAAM,SAAjD,UACE,wBAEE5B,GAAG,MACHE,GAAG,KACHH,EAAE,KACFuC,KAAK,OACLlC,QAAS,WACmC,IAAtCwC,EAAWD,GAAeO,QAC5BhE,EAAMuD,cAENvD,EAAMmB,aAAauC,EAAWD,GAAeO,YAInD,wBAEElD,GAAG,MACHE,GAAG,MACHH,EAAE,KACFuC,KAAK,OACLlC,QAAS,WACoC,IAAvCwC,EAAWD,GAAeQ,SAC5BjE,EAAMuD,cAENvD,EAAMmB,aAAauC,EAAWD,GAAeQ,mBAMvD,sBAAKrD,UAAU,YAAf,UACE,wBAAQM,QAASlB,EAAMuD,YAAvB,4BACA,wBAAQrC,QAASlB,EAAMkE,iBAAvB,+BACA,wBAAQhD,QAASlB,EAAMmE,mBAAvB,uCC3DO,SAASC,EAAUpE,GAEhC,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAGIgE,EAAe,GAGfC,EAAe,GAEnBA,EAAaC,KAAKvE,EAAMO,KAAKe,QAAQtB,EAAM6C,QAC3C,IAAI2B,EAAc,GAIlB,IAFAA,EAAcF,EAAaG,QAEL,MAAfD,GAAqB,CAC1B,GAAIA,EAAYE,SAAU,CACxB,IAAIC,EAAaH,EAAYnB,QACzBuB,EAAaJ,EAAYlB,QAEV,IAAfqB,GAAmC,IAAfC,IACtBN,EAAaC,KAAKvE,EAAMO,KAAKe,QAAQqD,IACrCL,EAAaC,KAAKvE,EAAMO,KAAKe,QAAQsD,IACrCP,EAAaE,KAAKvE,EAAMO,KAAKsB,MAAM2C,EAAYK,cAC/CR,EAAaE,KAAKvE,EAAMO,KAAKsB,MAAM2C,EAAYM,mBAE5C,CACL,IAAIC,EAAYP,EAAYR,QAEV,IAAde,IACFT,EAAaC,KAAKvE,EAAMO,KAAKC,SAASuE,IACtCV,EAAaE,KAAKvE,EAAMO,KAAKsB,MAAM2C,EAAYQ,cAInDR,EAAcF,EAAaG,QAK7B,IAAInE,EAAgBN,EAAMO,KAAKC,SAASC,KAAI,SAACC,EAAMC,GACjD,OACE,wBACEC,UAAU,aACVC,EAAG,GACHC,GAAIJ,EAAKK,WACTC,GAAIN,EAAKO,WACTC,QAAS,WACPlB,EAAMmB,aAAaR,IAErBS,UAAWT,OAIbU,EAAgBrB,EAAMO,KAAKe,QAAQb,KAAI,SAACC,EAAMC,GAChD,OACE,wBACEC,UAAU,aACVC,EAAG,GACHC,GAAIJ,EAAKK,WACTC,GAAIN,EAAKO,WACTC,QAAS,WACPlB,EAAMuB,aAAaZ,IAErBsE,aAAc,YAqDpB,SAAoBtE,GAClBuE,QAAQC,IAAIxE,GACZR,EAAeH,EAAMO,KAAKe,QAAQX,GAAKc,MACvCpB,EAAcL,EAAMO,KAAKe,QAAQX,GAAKe,KAvDhCC,CAAWhB,IAEbS,UAAWT,OAIbiB,EAAU5B,EAAMO,KAAKsB,MAAMpB,KAAI,SAACqB,EAAMnB,GACxC,OACE,sBACEoB,GAAID,EAAKE,QACTC,GAAIH,EAAKI,QACTC,GAAIL,EAAKM,QACTC,GAAIP,EAAKQ,QACTC,OAAO,QACPC,YAAa,OAKf4C,EAAqBf,EAAa5D,KAAI,SAACqB,EAAMnB,GAC/C,OACE,sBACEoB,GAAID,EAAKE,QACTC,GAAIH,EAAKI,QACTC,GAAIL,EAAKM,QACTC,GAAIP,EAAKQ,QACTC,OAAO,OACPC,YAAa,QAMnB,OACE,sBAAK5B,UAAU,UAAf,UACE,qBAAKA,UAAU,WAAf,SACE,sBAAK6B,OAAO,OAAOC,MAAM,OAAzB,UACGd,EACAwD,EACA9E,EACAe,OAGL,sBAAKT,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BV,IAC9B,qBAAKU,UAAU,aAAf,SAA6BR,IAC7B,wBAAQc,QAASlB,EAAMuD,YAAvB,8BChHO,SAAS8B,EAAYrF,GAElC,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAGIgE,EAAe,GAGfC,EAAe,GAGnBA,EAAaC,KAAKvE,EAAMO,KAAKe,QAAQtB,EAAM6C,QAC3C,IAAI2B,EAAc,GAGlB,IAFAA,EAAcF,EAAaG,QAEL,MAAfD,GAAqB,CAC1B,GAAIA,EAAYE,SAEdF,EAAYxB,SAASsC,SAAQ,SAACC,GAC5BjB,EAAaC,KAAKvE,EAAMO,KAAKe,QAAQiE,OAEvCf,EAAYgB,cAAcF,SAAQ,SAACC,GACjClB,EAAaE,KAAKvE,EAAMO,KAAKsB,MAAM0D,WAEhC,CACL,IAAIE,EAAcjB,EAAYP,SAEV,IAAhBwB,IACFnB,EAAaC,KAAKvE,EAAMO,KAAKC,SAASiF,IACtCpB,EAAaE,KAAKvE,EAAMO,KAAKsB,MAAM2C,EAAYkB,gBAInDlB,EAAcF,EAAaG,QAK7B,IAAInE,EAAgBN,EAAMO,KAAKC,SAASC,KAAI,SAACC,EAAMC,GACjD,OACE,wBACEC,UAAU,aACVC,EAAG,GACHC,GAAIJ,EAAKK,WACTC,GAAIN,EAAKO,WACTC,QAAS,WACPlB,EAAMmB,aAAaR,IAErBS,UAAWT,OAIbU,EAAgBrB,EAAMO,KAAKe,QAAQb,KAAI,SAACC,EAAMC,GAChD,OACE,wBACEC,UAAU,aACVC,EAAG,GACHC,GAAIJ,EAAKK,WACTC,GAAIN,EAAKO,WACTC,QAAS,WACPlB,EAAMuB,aAAaZ,IAErBsE,aAAc,YAqDpB,SAAoBtE,GAClBuE,QAAQC,IAAIxE,GACZR,EAAeH,EAAMO,KAAKe,QAAQX,GAAKc,MACvCpB,EAAcL,EAAMO,KAAKe,QAAQX,GAAKe,KAvDhCC,CAAWhB,IAEbS,UAAWT,OAIbiB,EAAU5B,EAAMO,KAAKsB,MAAMpB,KAAI,SAACqB,EAAMnB,GACxC,OACE,sBACEoB,GAAID,EAAKE,QACTC,GAAIH,EAAKI,QACTC,GAAIL,EAAKM,QACTC,GAAIP,EAAKQ,QACTC,OAAO,QACPC,YAAa,OAKf4C,EAAqBf,EAAa5D,KAAI,SAACqB,EAAMnB,GAC/C,OACE,sBACEoB,GAAID,EAAKE,QACTC,GAAIH,EAAKI,QACTC,GAAIL,EAAKM,QACTC,GAAIP,EAAKQ,QACTC,OAAO,SACPC,YAAa,QAMnB,OACE,sBAAK5B,UAAU,UAAf,UACE,qBAAKA,UAAU,WAAf,SACE,sBAAK6B,OAAO,OAAOC,MAAM,OAAzB,UACGd,EACAwD,EACA9E,EACAe,OAGL,sBAAKT,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BV,IAC9B,qBAAKU,UAAU,aAAf,SAA6BR,IAC7B,wBAAQc,QAASlB,EAAMuD,YAAvB,8B,MCxGO,SAASoC,IAEtB,MAAgC1F,mBAAS,IAAzC,mBAAO2F,EAAP,KAAiBC,EAAjB,KAEA,EAAsC5F,mBAAS,GAA/C,mBAAO6F,EAAP,KAAoBC,EAApB,KAEA,EAAsC9F,mBAAS,GAA/C,mBAAO+F,EAAP,KAAoBC,EAApB,KAEA,EAA4ChG,mBAAS,GAArD,mBAAOiG,EAAP,KAAuBC,EAAvB,KAEA,EAA8BlG,oBAAS,GAAvC,mBAAOmG,EAAP,KAAgBC,EAAhB,KAcA,GAXAC,qBAAU,WACRD,GAAW,GACXE,MAAM,aACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACjG,GACL2E,QAAQC,IAAI5E,GACZsF,EAAYtF,GACZ8F,GAAW,QAEd,IAECD,EACF,OAAO,uDAIT,GAAuB,IAAnBF,EACF,OACE,qBAAKtF,UAAU,MAAf,SACE,cAACb,EAAD,CACEQ,KAAMqF,EACNzE,aAAcA,EACdI,aAAcA,MAKjB,GAAuB,IAAnB2E,EACP,OACE,qBAAKtF,UAAU,MAAf,SACE,cAAC+B,EAAD,CACEpC,KAAMqF,EACN/C,MAAOiD,EACPvE,aAAcA,EACdgC,YAAaoD,MAKhB,GAAuB,IAAnBT,EACP,OACE,qBAAKtF,UAAU,MAAf,SACE,cAAC4C,EAAD,CACEjD,KAAMqF,EACN/C,MAAOmD,EACP7E,aAAcA,EACd+C,iBA4DR,WACEiC,EAAkB,IA5DZhC,mBAgER,WACEgC,EAAkB,IAhEZ5C,YAAaoD,MAKhB,GAAuB,IAAnBT,EACP,OACE,qBAAKtF,UAAU,MAAf,SACE,cAACwD,EAAD,CACE7D,KAAMqF,EACN/C,MAAOmD,EACP7E,aAAcA,EACdI,aAAcA,EACdgC,YAAaoD,MAKhB,GAAuB,IAAnBT,EACP,OACE,qBAAKtF,UAAU,MAAf,SACE,cAACyE,EAAD,CACE9E,KAAMqF,EACN/C,MAAOmD,EACP7E,aAAcA,EACdI,aAAcA,EACdgC,YAAaoD,MAOrB,SAASA,IACPZ,EAAe,GACfE,EAAe,GACfE,EAAkB,GAIpB,SAAShF,EAAayF,GACL,IAAXA,GACFD,IAEFZ,EAAea,GACfT,EAAkB,GAIpB,SAAS5E,EAAaqF,GACL,IAAXA,GACFD,IAEFV,EAAeW,GACfT,EAAkB,IC3HtB,IAYeU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5B,EAAD,MAEF6B,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.9f49227c.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default function Tree(props) {\r\n  // Containers for Preview Text, Updated when Mouse is over a Person Node\r\n  // Displayed in SidePanel\r\n  const [namePreview, setNamePreview] = useState(\"\");\r\n  const [bioPreview, setBioPreview] = useState(\"\");\r\n\r\n  // Constructs Family Node circles from json data\r\n  let familyNodeEls = props.data.families.map((node, ind) => {\r\n    return (\r\n      <circle\r\n        className=\"familyNode\"\r\n        r={25}\r\n        cx={node.nodeXCoord}\r\n        cy={node.nodeYCoord}\r\n        onClick={() => {\r\n          props.selectFamily(ind);\r\n        }}\r\n        nodeindex={ind}\r\n      />\r\n    );\r\n  });\r\n  // Construct Person Node circles from json data\r\n  let personNodeEls = props.data.persons.map((node, ind) => {\r\n    return (\r\n      <circle\r\n        className=\"personNode\"\r\n        r={25}\r\n        cx={node.nodeXCoord}\r\n        cy={node.nodeYCoord}\r\n        onClick={() => {\r\n          props.selectPerson(ind);\r\n        }}\r\n        onMouseOver={() => {\r\n          SetPreview(ind);\r\n        }}\r\n        nodeindex={ind}\r\n      />\r\n    );\r\n  });\r\n  // Construct lines from json data\r\n  // Present for visual effect and to enable highlighting in Ancestor/Descendant view\r\n  let lineEls = props.data.lines.map((line, ind) => {\r\n    return (\r\n      <line\r\n        x1={line.x1Coord}\r\n        y1={line.y1Coord}\r\n        x2={line.x2Coord}\r\n        y2={line.y2Coord}\r\n        stroke=\"black\"\r\n        strokeWidth={5}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"viewport\">\r\n        <svg height=\"100%\" width=\"100%\">\r\n          {lineEls}\r\n          {familyNodeEls}\r\n          {personNodeEls}\r\n        </svg>\r\n      </div>\r\n      <div className=\"sidePanel\">\r\n        <div className=\"namePreview\">{namePreview}</div>\r\n        <div className=\"bioPreview\">{bioPreview}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Set Preview Text on Mouse Over\r\n  function SetPreview(ind) {\r\n    //console.log(ind);\r\n    setNamePreview(props.data.persons[ind].name);\r\n    setBioPreview(props.data.persons[ind].bio);\r\n  }\r\n}\r\n","export default function Family(props) {\r\n  let currentFamily = props.index;\r\n  let familyList = props.data.families;\r\n\r\n  //console.log(currentPerson);\r\n  //console.log(personList);\r\n  //console.log(personList[currentPerson]);\r\n\r\n  // Dynamically place the Children buttons, based on the number of children of the Family\r\n  let numChildren = familyList[currentFamily].children.length + 1;\r\n  let childButtonEls = familyList[currentFamily].children.map((child, ind) => {\r\n    return (\r\n      <circle\r\n        cx={(1280 / numChildren) * (ind + 1)}\r\n        cy=\"872\"\r\n        r=\"25\"\r\n        fill=\"purple\"\r\n        onClick={() => props.selectPerson(child)}\r\n      />\r\n    );\r\n  });\r\n\r\n  // Display Family View, with Buttons to move to connected Person Nodes\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"viewport\">\r\n        <div className=\"info\"></div>\r\n        <svg className=\"nodeButtons\" height=\"100%\" width=\"1280px\">\r\n          <circle\r\n            cx=\"320\"\r\n            cy=\"80\"\r\n            r=\"25\"\r\n            fill=\"purple\"\r\n            onClick={() => {\r\n              props.selectPerson(familyList[currentFamily].spouse1);\r\n            }}\r\n          />\r\n          <circle\r\n            cx=\"960\"\r\n            cy=\"80\"\r\n            r=\"25\"\r\n            fill=\"purple\"\r\n            onClick={() => {\r\n              props.selectPerson(familyList[currentFamily].spouse2);\r\n            }}\r\n          />\r\n          {childButtonEls}\r\n        </svg>\r\n      </div>\r\n      <div className=\"sidePanel\">\r\n        <button onClick={props.resetStyles}>Return to Tree</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function Person(props) {\r\n  let currentPerson = props.index;\r\n  let personList = props.data.persons;\r\n\r\n  //console.log(currentPerson);\r\n  //console.log(personList);\r\n  //console.log(personList[currentPerson]);\r\n\r\n  // Display Person Data, with Buttons to move to Connected Family Nodes\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"viewport\">\r\n        <div className=\"info\">\r\n          <h1>{personList[currentPerson].name}</h1>\r\n          <h2>{\"Race: \" + personList[currentPerson].race}</h2>\r\n          <h3>\r\n            {personList[currentPerson].bornText +\r\n              \": \" +\r\n              personList[currentPerson].born}\r\n          </h3>\r\n          <h3>\r\n            {personList[currentPerson].deathText +\r\n              \": \" +\r\n              personList[currentPerson].died}\r\n          </h3>\r\n          <h3>{personList[currentPerson].bio}</h3>\r\n        </div>\r\n        <svg className=\"nodeButtons\" height=\"100%\" width=\"1280px\">\r\n          <circle\r\n            //points=\"640,80 680,120 600,40\"\r\n            cx=\"640\"\r\n            cy=\"80\"\r\n            r=\"25\"\r\n            fill=\"gold\"\r\n            onClick={() => {\r\n              if (personList[currentPerson].parents === 0) {\r\n                props.resetStyles();\r\n              } else {\r\n                props.selectFamily(personList[currentPerson].parents);\r\n              }\r\n            }}\r\n          />\r\n          <circle\r\n            //points=\"640,872 600,832 680,832\"\r\n            cx=\"640\"\r\n            cy=\"872\"\r\n            r=\"25\"\r\n            fill=\"gold\"\r\n            onClick={() => {\r\n              if (personList[currentPerson].marriage === 0) {\r\n                props.resetStyles();\r\n              } else {\r\n                props.selectFamily(personList[currentPerson].marriage);\r\n              }\r\n            }}\r\n          />\r\n        </svg>\r\n      </div>\r\n      <div className=\"sidePanel\">\r\n        <button onClick={props.resetStyles}>Return to Tree</button>\r\n        <button onClick={props.displayAncestors}>Display Ancestors</button>\r\n        <button onClick={props.displayDescendants}>Display Descendants</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function Ancestors(props) {\r\n  // Preview Text Containers\r\n  const [namePreview, setNamePreview] = useState(\"\");\r\n  const [bioPreview, setBioPreview] = useState(\"\");\r\n\r\n  // array containing lines to style to highlight\r\n  let linesToStyle = [];\r\n\r\n  // array for traversal of graph\r\n  let nodesToVisit = [];\r\n  // add starting Node to array\r\n  nodesToVisit.push(props.data.persons[props.index]);\r\n  let currentNode = {};\r\n  // remove currentNode from toVisit, showing Visited\r\n  currentNode = nodesToVisit.shift();\r\n  // search Node data for higher Nodes in graph (parents, spouses)\r\n  while (currentNode != null) {\r\n    if (currentNode.isFamily) {\r\n      let parentNum1 = currentNode.spouse1;\r\n      let parentNum2 = currentNode.spouse2;\r\n      // if both spouses are valid Nodes, add to toVisit array\r\n      if (parentNum1 !== 0 && parentNum2 !== 0) {\r\n        nodesToVisit.push(props.data.persons[parentNum1]);\r\n        nodesToVisit.push(props.data.persons[parentNum2]);\r\n        linesToStyle.push(props.data.lines[currentNode.spouse1Line]);\r\n        linesToStyle.push(props.data.lines[currentNode.spouse2Line]);\r\n      }\r\n    } else {\r\n      let parentNum = currentNode.parents;\r\n      // if parent is valid Node, add to toVisit array\r\n      if (parentNum !== 0) {\r\n        nodesToVisit.push(props.data.families[parentNum]);\r\n        linesToStyle.push(props.data.lines[currentNode.parentLine]);\r\n      }\r\n    }\r\n    // remove first element of toVisit, search for higher Nodes\r\n    currentNode = nodesToVisit.shift();\r\n  }\r\n  //console.log(linesToStyle);\r\n\r\n  // Construct Tree Copy\r\n  let familyNodeEls = props.data.families.map((node, ind) => {\r\n    return (\r\n      <circle\r\n        className=\"familyNode\"\r\n        r={25}\r\n        cx={node.nodeXCoord}\r\n        cy={node.nodeYCoord}\r\n        onClick={() => {\r\n          props.selectFamily(ind);\r\n        }}\r\n        nodeindex={ind}\r\n      />\r\n    );\r\n  });\r\n  let personNodeEls = props.data.persons.map((node, ind) => {\r\n    return (\r\n      <circle\r\n        className=\"personNode\"\r\n        r={25}\r\n        cx={node.nodeXCoord}\r\n        cy={node.nodeYCoord}\r\n        onClick={() => {\r\n          props.selectPerson(ind);\r\n        }}\r\n        onMouseEnter={() => {\r\n          SetPreview(ind);\r\n        }}\r\n        nodeindex={ind}\r\n      />\r\n    );\r\n  });\r\n  let lineEls = props.data.lines.map((line, ind) => {\r\n    return (\r\n      <line\r\n        x1={line.x1Coord}\r\n        y1={line.y1Coord}\r\n        x2={line.x2Coord}\r\n        y2={line.y2Coord}\r\n        stroke=\"black\"\r\n        strokeWidth={5}\r\n      />\r\n    );\r\n  });\r\n  // Reconstruct Highlighted Lines\r\n  let highlightedLineEls = linesToStyle.map((line, ind) => {\r\n    return (\r\n      <line\r\n        x1={line.x1Coord}\r\n        y1={line.y1Coord}\r\n        x2={line.x2Coord}\r\n        y2={line.y2Coord}\r\n        stroke=\"gold\"\r\n        strokeWidth={10}\r\n      />\r\n    );\r\n  });\r\n\r\n  // Display Ancestors\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"viewport\">\r\n        <svg height=\"100%\" width=\"100%\">\r\n          {lineEls}\r\n          {highlightedLineEls}\r\n          {familyNodeEls}\r\n          {personNodeEls}\r\n        </svg>\r\n      </div>\r\n      <div className=\"sidePanel\">\r\n        <div className=\"namePreview\">{namePreview}</div>\r\n        <div className=\"bioPreview\">{bioPreview}</div>\r\n        <button onClick={props.resetStyles}>Reset Tree</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Set Preview Text\r\n  function SetPreview(ind) {\r\n    console.log(ind);\r\n    setNamePreview(props.data.persons[ind].name);\r\n    setBioPreview(props.data.persons[ind].bio);\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function Descendants(props) {\r\n  // Containers for Preview Text\r\n  const [namePreview, setNamePreview] = useState(\"\");\r\n  const [bioPreview, setBioPreview] = useState(\"\");\r\n\r\n  // Container for highlighted lines\r\n  let linesToStyle = [];\r\n\r\n  // Container for navigating graph\r\n  let nodesToVisit = [];\r\n\r\n  // Begin at current Node\r\n  nodesToVisit.push(props.data.persons[props.index]);\r\n  let currentNode = {};\r\n  currentNode = nodesToVisit.shift();\r\n  // Search through graph for lower level Nodes(marriages, children)\r\n  while (currentNode != null) {\r\n    if (currentNode.isFamily) {\r\n      // add children to toVisit\r\n      currentNode.children.forEach((element) => {\r\n        nodesToVisit.push(props.data.persons[element]);\r\n      });\r\n      currentNode.childrenLines.forEach((element) => {\r\n        linesToStyle.push(props.data.lines[element]);\r\n      });\r\n    } else {\r\n      let marriageNum = currentNode.marriage;\r\n      // if valid marriage, add to toVisit\r\n      if (marriageNum !== 0) {\r\n        nodesToVisit.push(props.data.families[marriageNum]);\r\n        linesToStyle.push(props.data.lines[currentNode.marriageLine]);\r\n      }\r\n    }\r\n    // remove first element from toVisit, search for lower Nodes\r\n    currentNode = nodesToVisit.shift();\r\n  }\r\n  //console.log(linesToStyle);\r\n\r\n  // Construct Tree Copy\r\n  let familyNodeEls = props.data.families.map((node, ind) => {\r\n    return (\r\n      <circle\r\n        className=\"familyNode\"\r\n        r={25}\r\n        cx={node.nodeXCoord}\r\n        cy={node.nodeYCoord}\r\n        onClick={() => {\r\n          props.selectFamily(ind);\r\n        }}\r\n        nodeindex={ind}\r\n      />\r\n    );\r\n  });\r\n  let personNodeEls = props.data.persons.map((node, ind) => {\r\n    return (\r\n      <circle\r\n        className=\"personNode\"\r\n        r={25}\r\n        cx={node.nodeXCoord}\r\n        cy={node.nodeYCoord}\r\n        onClick={() => {\r\n          props.selectPerson(ind);\r\n        }}\r\n        onMouseEnter={() => {\r\n          SetPreview(ind);\r\n        }}\r\n        nodeindex={ind}\r\n      />\r\n    );\r\n  });\r\n  let lineEls = props.data.lines.map((line, ind) => {\r\n    return (\r\n      <line\r\n        x1={line.x1Coord}\r\n        y1={line.y1Coord}\r\n        x2={line.x2Coord}\r\n        y2={line.y2Coord}\r\n        stroke=\"black\"\r\n        strokeWidth={5}\r\n      />\r\n    );\r\n  });\r\n  // Reconstruct Highlighted Lines\r\n  let highlightedLineEls = linesToStyle.map((line, ind) => {\r\n    return (\r\n      <line\r\n        x1={line.x1Coord}\r\n        y1={line.y1Coord}\r\n        x2={line.x2Coord}\r\n        y2={line.y2Coord}\r\n        stroke=\"purple\"\r\n        strokeWidth={10}\r\n      />\r\n    );\r\n  });\r\n\r\n  // Display Descendants\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"viewport\">\r\n        <svg height=\"100%\" width=\"100%\">\r\n          {lineEls}\r\n          {highlightedLineEls}\r\n          {familyNodeEls}\r\n          {personNodeEls}\r\n        </svg>\r\n      </div>\r\n      <div className=\"sidePanel\">\r\n        <div className=\"namePreview\">{namePreview}</div>\r\n        <div className=\"bioPreview\">{bioPreview}</div>\r\n        <button onClick={props.resetStyles}>Reset Tree</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Update preview text\r\n  function SetPreview(ind) {\r\n    console.log(ind);\r\n    setNamePreview(props.data.persons[ind].name);\r\n    setBioPreview(props.data.persons[ind].bio);\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport Tree from \"./Components/Tree\";\nimport Family from \"./Components/Family\";\nimport Person from \"./Components/Person\";\nimport Ancestors from \"./Components/Ancestors\";\nimport Descendants from \"./Components/Descendants\";\nimport \"./styles.css\";\n\nexport default function App() {\n  // container for json data\n  const [treeData, setTreeData] = useState({});\n  // index into families array within data\n  const [familyIndex, setFamilyIndex] = useState(0);\n  // index into persons array within data\n  const [personIndex, setPersonIndex] = useState(0);\n  // toggle amongst component views\n  const [currentDisplay, setCurrentDisplay] = useState(0);\n  // enables delay to ensure data loads properly\n  const [loading, setLoading] = useState(true);\n\n  // load data\n  useEffect(() => {\n    setLoading(true);\n    fetch(\"data.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setTreeData(data);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <p>Currently Loading Data</p>;\n  }\n\n  // Display Tree\n  if (currentDisplay === 0) {\n    return (\n      <div className=\"App\">\n        <Tree\n          data={treeData}\n          selectFamily={selectFamily}\n          selectPerson={selectPerson}\n        />\n      </div>\n    );\n  } // Display Family Node\n  else if (currentDisplay === 1) {\n    return (\n      <div className=\"App\">\n        <Family\n          data={treeData}\n          index={familyIndex}\n          selectPerson={selectPerson}\n          resetStyles={returnToTree}\n        />\n      </div>\n    );\n  } // Display Person Node\n  else if (currentDisplay === 2) {\n    return (\n      <div className=\"App\">\n        <Person\n          data={treeData}\n          index={personIndex}\n          selectFamily={selectFamily}\n          displayAncestors={displayAncestors}\n          displayDescendants={displayDescendants}\n          resetStyles={returnToTree}\n        />\n      </div>\n    );\n  } // Displays Tree and Highlights Ancestors of Current Person\n  else if (currentDisplay === 3) {\n    return (\n      <div className=\"App\">\n        <Ancestors\n          data={treeData}\n          index={personIndex}\n          selectFamily={selectFamily}\n          selectPerson={selectPerson}\n          resetStyles={returnToTree}\n        />\n      </div>\n    );\n  } // Displays Tree and Highlights Descendants of Current Person\n  else if (currentDisplay === 4) {\n    return (\n      <div className=\"App\">\n        <Descendants\n          data={treeData}\n          index={personIndex}\n          selectFamily={selectFamily}\n          selectPerson={selectPerson}\n          resetStyles={returnToTree}\n        />\n      </div>\n    );\n  }\n\n  // Triggered on Click from all components except Tree, to return to Tree\n  function returnToTree() {\n    setFamilyIndex(0);\n    setPersonIndex(0);\n    setCurrentDisplay(0);\n  }\n\n  // Selects a Family Node, and Displays the data and connections associated\n  function selectFamily(nodeId) {\n    if (nodeId === 0) {\n      returnToTree();\n    }\n    setFamilyIndex(nodeId);\n    setCurrentDisplay(1);\n  }\n\n  // Selects a Person Node, and Displays the data and connections associated\n  function selectPerson(nodeId) {\n    if (nodeId === 0) {\n      returnToTree();\n    }\n    setPersonIndex(nodeId);\n    setCurrentDisplay(2);\n  }\n\n  // Called from within Person view, displays Ancestors of that Person\n  function displayAncestors() {\n    setCurrentDisplay(3);\n  }\n\n  // Called from within Person view, displays Descendants of that Person\n  function displayDescendants() {\n    setCurrentDisplay(4);\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}